/* eslint valid-jsdoc: 2 */
/* types */

/**
 * @typedef {Function} onEffect
 *
 * @description
 *
 * <blockquote>
 *   This function is an interface you should adhere to,
 *   not a value that is constructed or generated by another function.
 * </blockquote>
 *
 * Function that is passed into {@link Tram-One#useEffect | useEffect} hook.
 * It has no parameters. If a function is returned, then
 * that function is called on cleanup.
 *
 * @returns {Function} optional cleanup function to call when component is removed from app
 *
 * @example
 * useEffect(() => {
 *   // user has 5 seconds before seeing alert
 *   const timerId = setTimeout(() => alert(`Time's up!`), 5000)
 *
 *   // if component is removed, clear timer
 *   return () => clearTimeout(timerId)
 * })
 */

/* methods */

/**
 * @name useEffect
 * @function
 * @memberof Tram-One
 * @instance
 *
 * @description
 * Hook that triggers component start, update, and cleanup effects.
 * If the result of onEffect is another function, then that function is called on when the component is removed.
 *
 * If there are triggers passed in, when those values are updated, the cleanup will also get called, and
 * the onEffect will trigger again. It is a common pattern to list any value used in the effect as a trigger.
 *
 * If {@link onEffect} does not return a function, the return is ignored, which means async
 * functions are okay!
 *
 * @param {onEffect} onEffect function to run on component mount
 * @param {Array} [triggers=[]] list of values that when updated will trigger the effect again
 *
 * @example
 * import { registerHtml, useEffect, useState } from 'tram-one'
 * const html = registerHtml()
 *
 *
 * export default () => {
 *   const [title, updateTitle] = useState('Tram-One App')
 *   onUpdateTitle = (event) => updateTitle(event.target.value)
 *
 *   useEffect(() => {
 *     document.title = title
 *   }, [title])
 *
 *   return html`<input value=${title} onkeydown=${onUpdateTitle} />`
 * }
 */
